// TODO GETSIB and GETSIBS might be called GETNET and GETBUS, etc?
/*
 * Copyright (c) Jeff Berkowitz 2025.
 *
 * This file is part of wut4, which is licensed under the Affero GPL.
 * Code generated by the transpiler is owned by the schematic owner.
 */
package main

import (
	"fmt"
	"strings"
)

// emit is the main entry point for code generation.
// It orchestrates calls to various specific emitting functions.
func emit(ast *ModelNode, data *BindingData) error {
	if err := openOutputs(); err != nil {
		return err
	}
	if err := emitTopComment(ast); err != nil {
		return fmt.Errorf("failed to emit top comment: %w", err)
	}

	shortName := hFileName[1+strings.LastIndexByte(hFileName, byte('/')):]
	emitc("#include \"%s\"", shortName)
	emitc("")

	upperSymbolName := strings.Replace(strings.ToUpper(shortName), ".", "_", -1)
	emith("#ifndef %s", upperSymbolName)
	emith("#define %s", upperSymbolName)
	emith("")
	emith("#include <stdint.h>")
	emith("#include \"api.h\"")
	emith("")

	if err := emitFixedContent(); err != nil {
		return fmt.Errorf("failed to emit fixed content: %w", err)
	}
	if err := emitNets(data); err != nil {
		return fmt.Errorf("failed to emit wire nets: %w", err)
	}
	if err := emitBuses(data); err != nil {
		return fmt.Errorf("failed to emit buses: %w", err)
	}
	if err := emitComponents(data); err != nil {
		return fmt.Errorf("failed to emit component types: %w", err)
	}
	if err := emitInstances(data); err != nil {
		return fmt.Errorf("failed to emit component instances: %w", err)
	}

	emith("")
	emith("#endif // %s", upperSymbolName)
	return nil
}

func emitComponents(data *BindingData) error {
//	emith("// Component types")
//	for _, c := range data.ComponentTypes {
//		var baseType string
//		if len(c.pins) <= 18 {
//			baseType = "bitvec16_t"
//		} else if len(c.pins) <= 66 {
//			baseType = "bitvec64_t"
//		} else {
//			return fmt.Errorf("part has too many pins: %s:%s", c.lib, c.part)
//		}
//
//		emith("typedef struct %s %s_t;", baseType, makeComponentTypeName(c))
//	}
	return nil
}

func emitInstances(data *BindingData) error {
	return nil
}

// Generate a useful top comment
// TODO get the company and put it in the copyright
const topCommentStart = `/*
 * Copyright (c) %s 2025. All rights reserved.
 * This file was generated from a KiCad schematic. Do not edit.
 *
 * Tool: KiCad %s (schema version %s)
 * From: %s
 * Date: %s
 *`

const topCommentEnd = " */"

func emitTopComment(ast *ModelNode) error {
	schemaVersion := qss(ast, "version")
	designSource := qss(ast, "design:source")
	designDate := qss(ast, "design:date")
	designTool := qss(ast, "design:tool")
	companyName := qss(ast, "design:sheet:title_block:company")
	if len(companyName) == 0 || companyName == "NOTFOUND" {
		companyName = "(No company name given in sheet)"
	}
	if designTool != "Eeschema 8.0.8" || schemaVersion != "E" {
		msg("WARNING: netlist was written by an untested version of KiCad.\n")
	}
	emitc(topCommentStart, companyName, designTool, schemaVersion, designSource, designDate)
	emith(topCommentStart, companyName, designTool, schemaVersion, designSource, designDate)

	// Now emit a line for each sheet in the schematic.
	for _, sheet := range(q(ast, "design:sheet")) {
		sheetNumber := qss(sheet, "number")
		sheetName := qss(sheet, "name")
		title := qss(sheet, "title_block:title")
		if valid(title) {
			emitc(" * sheet %s: %s (%s)", sheetNumber, sheetName, title)
			emith(" * sheet %s: %s (%s)", sheetNumber, sheetName, title)
		} else {
			emitc(" * sheet %s: %s", sheetNumber, sheetName)
			emith(" * sheet %s: %s", sheetNumber, sheetName)
		}
	}

	emitc(topCommentEnd)
	emitc("")
	emith(topCommentEnd)
	emith("")
	return nil
}

// XXX FIXME nNets also TODO need a real allocator
// Need to decide whether this counts the number of nets or whether
// it is effectiely the number of machine words required to hold all
// nets or ...
var NetsCount uint = 32 // number of sibs allocated for the entire simulation

func emitFixedContent() error {
	netsVarName := fmt.Sprintf("%sNets", UniquePrefix)
	emith("extern uint64_t %s[];", netsVarName);
	emith("")

	emith("#define getnet(s)       GET1(%s, s)", netsVarName)
	emith("#define setnet(s, v)    SET1(%s, s, v)", netsVarName)
	emith("#define getbus(s, n)    GETN(%s, s, n)", netsVarName)
	emith("#define setbus(s, n, v) SETN(%s, s, n, v)", netsVarName)
	emith("")

	// Emit the definition of the nets array into the (tiny) C file
	emitc("// Wire nets")
	emitc("uint64_t %s[%d];", netsVarName, 1+(NetsCount-1)/32)
	emitc("")

	return nil
}

// Emit the wire nets.
func emitNets(data *BindingData) error {
	for _, ni := range data.NetInstances {
		nameUpper := strings.ToUpper(ni.name)
		if nameUpper == "VCC" || nameUpper == "GND" ||
			nameUpper == "CLK" || nameUpper == "POR" ||
			strings.Contains(nameUpper, "UNCONNECTED") ||
			nameUpper[0] == '/' { // i.e. it's a bus
			continue; // don't assign a bit or gen a name
		}
		netName := makeNetName(ni)
		if err := emitNet(ni, netName); err != nil {
			return err
		}
		// Emit aliases for net
		for _, nn := range(ni.netNodes) {
			emith("#define %s_%s %s", nn.part.ref, nn.pin.num, netName)
		}
		emith("")
	}
	return nil
}

/*
type PinInfo struct {
    num string      // The pin "number" is not always a number
    name string     // pin (signal) name
    kind string     // string enum described above
}

type ComponentInstance struct {
    ref string
    componentType *ComponentType
}

type NetNode struct {
    part *ComponentInstance
    pin *PinInfo
}

type NetInstance struct {
    code string         // is this always a number?
    name string
    netNodes []*NetNode // endpoints on this net
}
*/

// Emit the definition of a net using the given bit position.
func emitNet(ni *NetInstance, netName string) error {
	position, err := allocWireBits(1)
	if err != nil {
		return fmt.Errorf("emitting net %s: %v", ni.name, err)
	}
	result := emitNetMacros(netName, position, 1)
	emith("")
	return result
}

// Bus. Bus names start with a "/" and KiCad delimits the bus name from
// the net number(s) within the bus using a '-'. But we don't want to
// split() on the '-' because nothing prevents someone from putting a '-'
// into the bus name. We want the last '-'.
//
// We emit a set of macros for the bus as a unit. We impose no particular
// ordering on the bits within a bus, leaving that to the handwritten
// functional code. The idea is that the handwritten code can manipulate
// buses as units, e.g. the output bus of a 16-bit ALU can be set by doing
// 16-bit operations, etc.

func emitBuses(data *BindingData) error {
	busMap := make(map[string]int) // map bus names to number of nets

	for _, ni := range data.NetInstances {
		if ni.name[0] != '/' {
			continue
		}

		sepIndex := strings.LastIndexByte(ni.name, byte('-'))
		if sepIndex == -1 {
			return fmt.Errorf("bus name has no '-' separator: %s", ni.name)
		}
		busName := ni.name[1:sepIndex]
		busMap[busName] += 1
	}

	for busName, count := range busMap {
		bitPos, err := allocWireBits(count)
		if err != nil {
			return fmt.Errorf("emitting bus %s: %v", busName, err)
		}
		if result := emitNetMacros(busName, bitPos, count); result != nil {
			return result
		}
		emith("#define %s_SIZE %d\n", busName, busMap[busName])
	}
	
	return nil
}

