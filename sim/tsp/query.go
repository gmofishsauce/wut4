/*
 * Copyright (c) Jeff Berkowitz 2025.
 *
 * This file is part of wut4, which is licensed under the Affero GPL.
 * Code generated by the transpiler is owned by the schematic owner.
 */
package main

import (
	"strings"
)

// Find ModelNodes named "string" in the children of ModelNode m
func find(m *ModelNode, name string) []*ModelNode {
	var result []*ModelNode
	for _, c := range m.Children {
		if name == c.Name {
			result = append(result, c)
		}
	}
	return result
}

// Return a set of ModelNodes named a:b:c... where the node "a"
// is a child of the root node. Multiple hits are possible at
// every level.
func q(root *ModelNode, selector string) []*ModelNode {
	names := strings.Split(selector, ":")
	candidates := []*ModelNode{root}
	var newCandidates []*ModelNode

	if len(names) == 0 {
		return []*ModelNode{}
	}
	for _, n := range names {
		for _, c := range candidates {
			newCandidates = append(newCandidates, find(c, n)...)
		}
		if len(newCandidates) == 0 {
			return newCandidates
		}
		candidates = newCandidates
		newCandidates = newCandidates[:0]
	}
	return candidates
}

// Return the value field of a single ModelNode as a string
// with quotes removed. Since this program is a transpiler,
// in-band error returns are used: if the query returns no
// nodes, the return value is NOTFOUND and if the query returns
// multiple nodes, the return value is MULTIPLE.
func qss(root *ModelNode, selector string) string {
	result := q(root, selector)
	if len(result) == 0 {
		return "NOTFOUND"
	}
	if len(result) > 1 {
		return "MULTIPLE"
	}
	if len(result[0].Value) == 0 {
		return "NOTFOUND"
	}
	if len(result[0].Value) > 1 {
		return "MULTIPLE"
	}
	return result[0].Value[0]
}

// Return true if the string is not empty and not equal
// to "NOTFOUND" or "MULTIPLE".
func valid(s string) bool {
	return len(s) > 0 && s != "NOTFOUND" && s != "MULTIPLE"
}

