/*
 * Copyright (c) Jeff Berkowitz 2025.
 *
 * This file is part of wut4, which is licensed under the Affero GPL.
 * Code generated by the transpiler remains property of the schematic's owner.
 */
package main

import (
	"fmt"
	"os"
)

var debug bool

func msg(format string, a ...any) (n int, err error) {
	n, err = fmt.Fprintf(os.Stderr, format, a...)
	return n, err
}

func dbg(format string, a ...any) (n int, err error) {
	if debug {
		n, err = fmt.Fprintf(os.Stderr, format, a...)
		return n, err
	}
	return 0, nil
}

func main() {
	msg("firing up...\n")
	files := os.Args[1:]
	if len(files) != 1 {
		msg("Usage: tsp netlist-file\n")
		os.Exit(1)
	}
	bytes, err := os.ReadFile(files[0])
	if err != nil {
		msg("%s: reading %s: %v\n", os.Args[0], files[0], err)
		os.Exit(1)
	}

	netlist := string(bytes)
	root, err := parse(netlist)
    if err != nil {
		msg("%s: parsing %s: %v\n", os.Args[0], files[0], err)
        os.Exit(2)
    }
    msg("parse complete, binding data...\n")

	bindingData, err := bind(root)
	if err != nil {
		msg("data binding failed: %v\n", err)
		os.Exit(2)
	}
	msg("binding complete, emitting code...\n")

	if err := emit(root, bindingData); err != nil {
		msg("code emission failed: %v\n", err)
		os.Exit(3)
	}
	msg("successfully processed %s\n", files[0])
	os.Exit(0)
}
