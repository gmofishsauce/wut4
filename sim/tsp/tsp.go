/*
 * Copyright (c) Jeff Berkowitz 2025.
 *
 * This file is part of wut4, which is licensed under the Affero GPL.
 * Code generated by the transpiler remains property of the schematic's owner.
 */
package main

import (
	"fmt"
	"os"
)

var debug bool

func msg(format string, a ...any) (n int, err error) {
	n, err = fmt.Fprintf(os.Stderr, format, a...)
	return n, err
}

func dbg(format string, a ...any) (n int, err error) {
	if debug {
		n, err = fmt.Fprintf(os.Stderr, format, a...)
		return n, err
	}
	return 0, nil
}

func main() {
	msg("firing up...\n")
	files := os.Args[1:]
	if len(files) != 1 {
		msg("Usage: tsp netlist-file\n")
		os.Exit(1)
	}
	bytes, err := os.ReadFile(files[0])
	if err != nil {
		msg("%s: reading %s: %v\n", os.Args[0], files[0], err)
		os.Exit(1)
	}

	netlist := string(bytes)
	root, err := parse(netlist)
    if err != nil {
		msg("%s: parsing %s: %v\n", os.Args[0], files[0], err)
        os.Exit(2)
    }
    msg("parse complete, transpiling...\n")

	if err := transpile(root); err != nil {
		msg("transpile failed: %v\n", err)
		os.Exit(2)
	}
	msg("done\n")
	os.Exit(0)
}

// A few calls to exercise code.
// Not really tests
func runSomeTests(root *ModelNode) error {
	dump(root, 0)

	qstr := "version"
	single := q(root, qstr)
	if len(single) != 1 {
		msg("q(root, %s) found %d nodes!?\n", qstr, len(single))
		return fmt.Errorf("query failed: %s", qstr)
	}
	msg("%s: %v\n", qstr, single[0].Value)

	qstr = "version"
	ss := qss(root, qstr)
	if ss == "NOTFOUND" || ss == "MULTIPLE" {
		msg("q(root, %s) returned %s\n", qstr, ss)
		return fmt.Errorf("query failed: %s", qstr)
	}
	msg("%s: %s\n", qstr, ss)

	qstr = "design:sheet:title_block:company"
	single = q(root, qstr)
	if len(single) != 1 {
		msg("q(root, %s) found %d nodes!?\n", qstr, len(single))
		return fmt.Errorf("query failed: %s", qstr)
	}
	msg("%s: %s\n", qstr, single[0].Value)

	msg("some tests passed\n")
	return nil
}

