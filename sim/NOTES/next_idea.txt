And for my next idea ... ;-)

Still a four-stage digital circuit simulator with some notion of time.

Define a little language for just the inputs, outputs, and connections
of a digital circuit. (Investigate KiCad netlist exports as the format.)

Write a lexer and parser that transpiles the little language to C declaration
syntax. All the behavior of the components to be defined by handwritten
C language functions.

The generated C declaration syntax is designed to allow the easy rearrangement
of declarations to enhance data reuse. Will need to experiment. For example,
might have no structs, just external (global) named shortwords.

Arrange (somehow) to track read and write accesses to the named shortwords.
This has to be dynamic - it's necessary to know exactly when globals get
read or written and in what order.

Possibly provide global functions solely for reading and writing the global
variables. Might be called e.g. short READ(global) and void WRITE(global).
These cannot be trivially autogenerated because only want to call them when
the value is actually used.

Produce a trace (?) more generally some record of the access pattern for
the global variables.

(The "global" variables could be array elements in a hidden (static) array
contained in a separate file that had global accessors for the variables.)

The transpiler could generate macros that can be redefined when the access
gathering phase changes to the fast runtime phase.

The little language (LL) is declarative (all the behavior is in the form
of C functions). It's nothing but a convenient and clear way to write a
large number of C language declarations. Something like this:

component 74163 {   // roughly speaking a type declaration
    inputs (A, B, C, D, load#, clr#, enp, ent, CLK) // in
    outputs(Qa, Qb, Qc, Qd, rco)                    // out
    combinational()                                 // comb
    sequential()                                    // seq
}

74163 {
    
    net(databus4:7, A, B, C, D)                     // stretch goal
    net(Qa, Qb, Qc, Qd, databus4:7)                 // stretch goal
}
